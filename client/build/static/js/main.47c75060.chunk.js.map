{"version":3,"sources":["logo.svg","components/draw/Chat.js","components/draw/Canvas.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Chat","onSendBtnClick","state","socket","emit","message","handle","handleChange","e","target","setState","id","value","this","io","connect","on","data","document","getElementById","innerHTML","alert","type","placeholder","onChange","onClick","React","Component","Canvas","props","isPainting","userStrokeStyle","guestStrokeStyle","line","userId","v4","prevPos","offsetX","offsetY","onMouseDown","bind","onMouseMove","endPaintEvent","pusher","Pusher","cluster","nativeEvent","offSetData","position","start","stop","concat","paint","sendPaintData","currPos","strokeStyle","x","y","ctx","beginPath","moveTo","lineTo","stroke","body","fetch","method","JSON","stringify","headers","req","json","canvas","width","height","getContext","lineJoin","lineCap","lineWidth","subscribe","forEach","ref","style","background","onMouseLeave","onMouseUp","App","textAlign","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.47c75060.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport '../../css/styles.css'\r\nimport io from 'socket.io-client'\r\n\r\nclass Chat extends React.Component {\r\n\r\n    \r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            socket: null,\r\n            handle: \"\",\r\n            message: \"\"\r\n        }\r\n\r\n    }\r\n    \r\n    componentDidMount(){\r\n        // Make connection\r\n        var url = \"https://guguwagwag.herokuapp.com\";\r\n        // var url = \"192.168.1.12:4000\";\r\n\r\n        // Listen for events\r\n        this.setState({ socket: io.connect(url)}, function(){\r\n            if(this.state.socket != null){\r\n                this.state.socket.on('chat', function(data){\r\n                    var output = document.getElementById(\"output\");\r\n                    // console.log(output);\r\n                    output.innerHTML += \"<p><strong>\" + data.handle + \": </strong>\" + data.message + \"</p>\";\r\n                })\r\n            }else{\r\n                alert(\"Failed to connect server.\")\r\n            }\r\n        });\r\n\r\n        // console.log(this.state);\r\n        \r\n        \r\n    }\r\n\r\n    onSendBtnClick = () => {\r\n        if(this.state.socket != null){\r\n            this.state.socket.emit('chat', {\r\n                message: this.state.message,\r\n                handle: this.state.handle\r\n            })\r\n        }\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        const { target } = e;\r\n    \r\n        this.setState(state => ({\r\n          ...state,\r\n          [target.id]: target.value,\r\n        }));\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"mario-chat\">\r\n                <div id=\"chat-window\">\r\n                    <div id=\"output\"></div>\r\n                </div>\r\n                <input id=\"handle\" type=\"text\" placeholder=\"Handle\" onChange={this.handleChange}></input>\r\n                <input id=\"message\" type=\"text\" placeholder=\"Message\" onChange={this.handleChange}></input>\r\n                <button id=\"send\" onClick={this.onSendBtnClick}>Send</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default Chat","import React, { Component } from \"react\";\r\nimport { v4 } from \"uuid\";\r\nimport Pusher from \"pusher-js\";\r\nimport '../../css/canvas.css'\r\n\r\nclass Canvas extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.onMouseDown = this.onMouseDown.bind(this);\r\n    this.onMouseMove = this.onMouseMove.bind(this);\r\n    this.endPaintEvent = this.endPaintEvent.bind(this);\r\n\r\n    this.pusher = new Pusher(\"PUSHER_KEY\", {\r\n      cluster: \"eu\",\r\n    });\r\n  }\r\n  isPainting = false;\r\n  userStrokeStyle = \"#EE92C2\";\r\n  guestStrokeStyle = \"#F0C987\";\r\n  line = [];\r\n  userId = v4();\r\n  prevPos = { offsetX: 0, offsetY: 0 };\r\n\r\n  onMouseDown({ nativeEvent }) {\r\n    const { offsetX, offsetY } = nativeEvent;\r\n    this.isPainting = true;\r\n    this.prevPos = { offsetX, offsetY };\r\n  }\r\n\r\n  onMouseMove({ nativeEvent }) {\r\n    if (this.isPainting) {\r\n      const { offsetX, offsetY } = nativeEvent;\r\n      const offSetData = { offsetX, offsetY };\r\n      this.position = {\r\n        start: { ...this.prevPos },\r\n        stop: { ...offSetData },\r\n      };\r\n      this.line = this.line.concat(this.position);\r\n      this.paint(this.prevPos, offSetData, this.userStrokeStyle);\r\n    }\r\n  }\r\n\r\n  endPaintEvent() {\r\n    if (this.isPainting) {\r\n      this.isPainting = false;\r\n      this.sendPaintData();\r\n    }\r\n  }\r\n\r\n  paint(prevPos, currPos, strokeStyle) {\r\n    const { offsetX, offsetY } = currPos;\r\n    const { offsetX: x, offsetY: y } = prevPos;\r\n\r\n    this.ctx.beginPath();\r\n    this.ctx.strokeStyle = strokeStyle;\r\n    this.ctx.moveTo(x, y);\r\n    this.ctx.lineTo(offsetX, offsetY);\r\n    this.ctx.stroke();\r\n    this.prevPos = { offsetX, offsetY };\r\n  }\r\n\r\n  async sendPaintData() {\r\n    const body = {\r\n      line: this.line,\r\n      userId: this.userId,\r\n    };\r\n\r\n    const req = await fetch(\"http://localhost:4000/paint\", {\r\n      method: \"post\",\r\n      body: JSON.stringify(body),\r\n      headers: {\r\n        \"content-type\": \"application/json\",\r\n      },\r\n    });\r\n    const res = await req.json();\r\n    this.line = [];\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.canvas.width = 800;\r\n    this.canvas.height = 500;\r\n    this.ctx = this.canvas.getContext(\"2d\");\r\n    this.ctx.lineJoin = \"round\";\r\n    this.ctx.lineCap = \"round\";\r\n    this.ctx.lineWidth = 5;\r\n\r\n    const channel = this.pusher.subscribe(\"painting\");\r\n    channel.bind(\"draw\", (data) => {\r\n      const { userId, line } = data;\r\n      if (userId !== this.userId) {\r\n        line.forEach((position) => {\r\n          this.paint(position.start, position.stop, this.guestStrokeStyle);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <canvas\r\n        ref={(ref) => (this.canvas = ref)}\r\n        style={{ background: \"black\" }}\r\n        onMouseDown={this.onMouseDown}\r\n        onMouseLeave={this.endPaintEvent}\r\n        onMouseUp={this.endPaintEvent}\r\n        onMouseMove={this.onMouseMove}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Canvas;\r\n","import React from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport Chat from \"./components/draw/Chat\";\r\nimport Canvas from \"./components/draw/Canvas\";\r\nimport \"./css/canvas.css\";\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Chat></Chat>\r\n      <h3 style={{ textAlign: \"center\" }}>Paint</h3>\r\n      <div className=\"main\">\r\n        <div className=\"color-guide\">\r\n          <h5>Color Guide</h5>\r\n          <div className=\"user user\">User</div>\r\n          <div className=\"user guest\">Guest</div>\r\n        </div>\r\n\r\n        <Canvas />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}